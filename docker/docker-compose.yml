version: '3'
services:
  https:
    image: steveltn/https-portal
    container_name: ${HTTPS_CONTAINER}
    ports:
      - ${LOCAL_IP}:80:80
      - ${LOCAL_IP}:443:443
    volumes:
      - https:/var/lib/https-portal
    environment:
      STAGE: local
      DOMAINS: '
      ${PROJECT_DOMAIN} -> http://${NGINX_CONTAINER},
      schema.${PROJECT_DOMAIN} -> http://${NGINX_CONTAINER},
      img.${PROJECT_DOMAIN} -> http://${S3_CONTAINER}:9000,
      mail.${PROJECT_DOMAIN} -> http://${MAIL_CONTAINER}:8025,
      '
    depends_on:
      - nginx
    networks:
      default:
        aliases:
          - img.${PROJECT_DOMAIN}
          - mail.${PROJECT_DOMAIN}
    env_file:
      - .env

  nginx:
    container_name: ${NGINX_CONTAINER}
    image: nginx:1.19-alpine
    volumes:
      - ../src/public:/${PROJECT_NAME}/public
      - schemaspy:/${SCHEMASPY_PREFIX}
      - ./nginx/conf/default.conf.template:/etc/nginx/conf.d/default.conf.template
    env_file:
      - .env
    command: >
      /bin/sh -c
      "envsubst '
      $$PROJECT_DOMAIN
      $$PROJECT_NAME
      $$APP_CONTAINER
      $${SCHEMASPY_PREFIX}
      '< /etc/nginx/conf.d/default.conf.template
      > /etc/nginx/conf.d/default.conf
      && nginx -g 'daemon off;'"
    depends_on:
      - app

  app:
    container_name: ${APP_CONTAINER}
    build:
      context: ..
      dockerfile: ./docker/app/Dockerfile
      args:
        - PROJECT_NAME=${PROJECT_NAME}
    image: ${APP_PREFIX}-${PROJECT_NAME}
    env_file:
      - .env
    volumes:
      # directories
      - ../src/app:/${PROJECT_NAME}/app
      - ../src/bootstrap:/${PROJECT_NAME}/bootstrap
      - ../src/config:/${PROJECT_NAME}/config
      - ../src/database:/${PROJECT_NAME}/database
      - ../src/resources:/${PROJECT_NAME}/resources
      - ../src/routes:/${PROJECT_NAME}/routes
      - ../src/tests:/${PROJECT_NAME}/tests
      - ../src/public:/${PROJECT_NAME}/public
      # files
      - ../src/artisan:/${PROJECT_NAME}/artisan
      - ../src/composer.json:/${PROJECT_NAME}/composer.json
      - ../src/composer.lock:/${PROJECT_NAME}/composer.lock
      - ../src/package.json:/${PROJECT_NAME}/package.json
      - ../src/package-lock.json:/${PROJECT_NAME}/package-lock.json
      - ../src/webpack.mix.js:/${PROJECT_NAME}/webpack.mix.js
      - ../src/phpunit.xml:/${PROJECT_NAME}/phpunit.xml
      # php.ini
      - ./app/conf/php.ini:/usr/local/etc/php/php.ini
      # php.conf
      - ./app/conf/docker.conf:/usr/local/etc/php-fpm.d/docker.conf
      # volumes
      - vendor:/${PROJECT_NAME}/vendor
      - node:/${PROJECT_NAME}/node_modules
    depends_on:
      - db
    working_dir: /${PROJECT_NAME}

  schemaspy:
    image: ${SCHEMASPY_CONTAINER}
    container_name: ${SCHEMASPY_CONTAINER}
    build: db/schemaspy
    working_dir: /app
    tty: true
    volumes:
      - schemaspy:/output
    env_file:
      - .env

  db:
    image: postgres:12-alpine
    container_name: ${DB_CONTAINER}
    env_file:
      - .env
    volumes:
      - db:/var/lib/postgresql/data
      - ./db/sql:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432

  redis:
    image: redis:6.0-alpine
    container_name: ${REDIS_CONTAINER}
    volumes:
      - redis:/data
    command: redis-server --appendonly yes
    env_file:
      - .env
    ports:
      - ${LOCAL_IP}:6379:6379

  mail:
    image: mailhog/mailhog
    container_name: ${MAIL_CONTAINER}
    ports:
      - ${LOCAL_IP}:8025:8025

  s3-buckets:
    image: minio/mc
    container_name: ${S3_BUCKET_CONTAINER}
    depends_on:
      - s3
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add ${MINIO_PROJECT} http://${S3_CONTAINER}:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb ${MINIO_PROJECT}/${MINIO_BUCKET};
      /usr/bin/mc policy set public ${MINIO_PROJECT}/${MINIO_BUCKET};
      exit 0;
      "
  s3:
    image: minio/minio:latest
    container_name: ${S3_CONTAINER}
    env_file:
      - .env
    command: server /export
    volumes:
      - s3:/export
      - s3-config:/root/.minio

networks:
  default:
    name: ${PROJECT_NAME}

volumes:
  https:
    name: ${HTTPS_CONTAINER}
  db:
    name: ${DB_CONTAINER}
  redis:
    name: ${REDIS_CONTAINER}
  s3:
    name: ${S3_CONTAINER}
  s3-config:
    name: ${S3_BUCKET_CONTAINER}
  vendor:
    name: ${APP_CONTAINER}-vendor
  node:
    name: ${APP_CONTAINER}-node
  schemaspy:
    name: ${DB_CONTAINER}-schemaspy
